#!/bin/bash

# GitHub repository: https://github.com/fearlessdots/auto-update-packages
# RUN THIS SCRIPT AS ROOT
# Warning: changing the values of the variables in this script may render it unworkable.

PROGRAM_DIR=/usr/share/auto-update-packages
LOG_DIR="$PROGRAM_DIR/logs"

# Shell display functions
show_info(){
	echo "[  AutoUpdatePackages  ] $1"
}

show_attention(){
	echo "[ ATTENTION ] $1"
}

finish_program()
{
	# $1 is the exit code
	exit $1
}

# Arguments
if [ "$1" = 'help' ]
then
	echo "Valid arguments:"
	echo "uninstall - uninstall this program"
	echo "enable - enable systemd service on boot"
	echo "disable - disable systemd service on boot"
	echo "version - display installed program's version"
elif [ "$1" = 'uninstall' ]
then
	$PROGRAM_DIR/bin/uninstall
	finish_program 0
elif [ "$1" = 'disable' ]
	$PROGRAM_DIR/bin/service-control 0
	finish_program 0
elif [ "$1" = 'enable' ]
	$PROGRAM_DIR/bin/service-control 1
	finish_program 0
elif [ "$1" = 'version' ]
	cat $PROGRAM_DIR/version
	finish_program 0
else
	show_attention "Invalid argument!"
fi

# Main funtions
write_to_log() {
	echo "[  AutoUpdatePackages  ] $1" >> $LOG_FILE
}

verify_log_dir() {
	if [ ! -d $LOG_DIR ]
	then
		mkdir $LOG_DIR
		write_to_log "Log directory was created because it did not exist"
	fi

	if [ `ls -A $LOG_DIR | wc -l` -gt $LOGS_LIMIT ]
	then
		write_to_log "Log directory files exceed limit: $LOGS_LIMIT"
		write_to_log "Change this behavior by modifying the variable value inside the script"
		rm $LOG_DIR/*
	fi
}

dpkg_management() {
    write_to_log "[  AutoStartup  ] Updating packages via apt..."
    sleep 1
    apt update -y >> $LOG_FILE 2> /dev/null
    sleep 2
    apt upgrade -y >> $LOG_FILE 2> /dev/null
    sleep 2
    apt dist-upgrade -y >> $LOG_FILE 2> /dev/null
    sleep 2
    apt autoremove -y >> $LOG_FILE 2> /dev/null
    sleep 2
    apt autoclean -y >> $LOG_FILE 2> /dev/null
    sleep 2
    apt purge -y ~c >> $LOG_FILE 2> /dev/null
    sleep 1
}

package_management() {
    write_to_log "[  AutoStartup  ] Running system package management"
    sleep 1
    dpkg_management
    sleep 1
    write_to_log "[  AutoStartup  ] Finished system package management"
}

#
##
#

# Create log file
DATE_DAY=$(date | awk '{ print $2 }')
DATE_MONTH=$(date | awk '{ print $3 }')
DATE_YEAR=$(date | awk '{ print $4 }')
DATE_TIME=$(date | awk '{ print $5 }')

TOKEN="$DATE_DAY-$DATE_MONTH-$DATE_YEAR-$DATE_TIME"
LOG_FILE="$LOG_DIR/$TOKEN.log"

# Verify log directory
verify_log_dir

# Print log file header
write_to_log "AUTOSTARTUP LOG FILE"
write_to_log ""
DATE=$(date)
write_to_log "$DATE"
write_to_log ""

# Run main function
write_to_log "[  AutoStartup  ] Initializing AutoStartup script..."
package_management
write_to_log "[  AutoStartup  ] AutoStartup program finished!"

sleep 2

finish_program 0
